package memo.auth;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import memo.util.Util;

import javax.servlet.http.HttpServletRequest;
import java.security.Key;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Optional;

public class TokenService {

    /**
     * @param subject the claim of the jwt
     * @param expiry  when the token should expire
     * @return a new jwt with the standard key generated by the KeyGenerator service, signed with the HS512 algorithm
     */
    public static String getToken(String subject, Key key, Date expiry) {
        return Jwts.builder()
                .setSubject(subject)
                .setExpiration(expiry)
                .signWith(SignatureAlgorithm.HS512, key)
                .compact();
    }

    /**
     * @param subject the claim of the jwt
     * @return a new access token (a normal Jwt token with expiry = 30 min)
     */
    public static String getAccessToken(String subject) {
        Date authTokenExpiry = Util.toDate(LocalDateTime.now().plusMinutes(30));
        return getToken(subject, KeyGenerator.getAccessKey(), authTokenExpiry);
    }

    /**
     * @param subject the claim of the jwt
     * @return a new refresh token (a normal Jwt token with expiry = 2 weeks)
     */
    public static String getRefreshToken(String subject) {
        Date refreshTokenExpiry = Util.toDate(LocalDateTime.now().plusWeeks(2));
        return getToken(subject, KeyGenerator.getRefreshKey(), refreshTokenExpiry);
    }


    /**
     * @param request
     * @return
     */
    public static Optional<String> getJwtFromRequest(HttpServletRequest request) {
        return Optional.ofNullable(request.getHeader("Authorization"))
                .filter(header -> header.startsWith("Bearer "))
                .map(header -> header.substring("Bearer ".length()));
    }

    /**
     *
     * @param key
     * @param jwtToken
     * @return
     */
    public static Optional<String> getSubjectOfToken(Key key, String jwtToken) {
        try{
            return Optional.ofNullable(
                    Jwts.parser()
                            .setSigningKey(key)
                            .parseClaimsJws(jwtToken)
                            .getBody()
                            .getSubject()
            );
        }
        catch(Exception e){
            return Optional.empty();
        }
    }
}
